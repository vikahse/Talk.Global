* Создала пустой проект* Отрисовала предположительный дизайн приложения, расположение всего функционала приложения (файлы лежат в папке PROJECT в GitHub) * Создала файл, в котором реализован класс CardAdapter* Создала файл, в котором реализован класс TabsAdapter* Создала файл, в котором реализован data class Tab* Создала файл, в котором реализован data class Card* Создала файл, в котором реализован класс AddCardActivity* Создала файл, в котором реализован соответственно с остальными классами класс MainActivity* Если рассматривать уже проделанную работу с точки зрения функционала, то уже реализован интерфейс страницы (полоса прочтения, карточки на странице, вкладки, кнопки с голосовым прочтением), также возможность добавлять карточку из галереи карточек, а в галереи карточек есть возможность уже создать карточку, добавив ее из галереи устройства или с камеры. Также уже реализовано окно обработки карточки, с добавлением названия. * Кусок кода на примере класса MainActivity: package com.example.myapplication;import androidx.appcompat.app.AppCompatActivity;import androidx.recyclerview.widget.GridLayoutManager;import androidx.recyclerview.widget.LinearLayoutManager;import androidx.recyclerview.widget.RecyclerView;import android.content.Intent;import android.os.Build;import android.os.Bundle;import android.speech.tts.TextToSpeech;import android.view.View;import android.widget.Toast;import com.example.myapplication.model.Card;import com.example.myapplication.model.ICard;import com.example.myapplication.model.Tab;import com.example.myapplication.model.UserCard;import com.google.android.material.floatingactionbutton.FloatingActionButton;import java.util.ArrayList;import java.util.List;import java.util.Locale;import DataBase.CardEntity;public class MainActivity extends AppCompatActivity {    private RecyclerView cardsRecyclerView;    private CardAdapter cardsAdapter;    private RecyclerView tabsRecyclerView;    private TabsAdapter tabsAdapter;    private RecyclerView cardsSentenceRecyclerView;    private CardAdapter cardsSentenceAdapter;    private FloatingActionButton voiceButton;    private FloatingActionButton eraseButton;    private TextToSpeech TTS;    private boolean ttsEnabled;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        initCardsRecyclerView();        initTabsRecyclerView();        initCardsSentenceRecyclerView();        initButtons();        setCards();        setTabs();        TTS = new TextToSpeech(this, new TextToSpeech.OnInitListener() {            @Override public void onInit(int initStatus) {                if (initStatus == TextToSpeech.SUCCESS) {                    if (TTS.isLanguageAvailable(new Locale(Locale.getDefault().getLanguage()))                            == TextToSpeech.LANG_AVAILABLE) {                        TTS.setLanguage(new Locale(Locale.getDefault().getLanguage()));                    } else {                        TTS.setLanguage(Locale.US);                    }                    TTS.setPitch(1.3f);                    TTS.setSpeechRate(0.7f);                    ttsEnabled = true;                } else if (initStatus == TextToSpeech.ERROR) {                    Toast.makeText(MainActivity.this, "Ошибка", Toast.LENGTH_LONG).show();                    ttsEnabled = false;                }            }        });    }    private void initCardsRecyclerView() {        cardsRecyclerView = findViewById(R.id.cards_recycler_view);        cardsAdapter = new CardAdapter();        cardsAdapter.setOnCardCLickListener(new CardAdapter.OnCardCLickListener() {            @Override            public void onClick(ICard card) {                if(card.isPlusNeeded()){                    startActivity(new Intent(MainActivity.this, GalleryActivity.class));                } else{                    cardsSentenceAdapter.addCard(card);                }            }        });        RecyclerView.LayoutManager gridLayoutManager = new GridLayoutManager(this, 4);        cardsRecyclerView.setLayoutManager(gridLayoutManager);        cardsRecyclerView.setAdapter(cardsAdapter);    }    private void setCards(){        List<ICard> cards = new ArrayList<>();        cards.add(new Card(R.drawable.first, "", true));        cards.add(new Card(R.drawable.drink, "пить",false));        cards.add(new Card(R.drawable.stop, "пить",false));        cards.add(new Card(R.drawable.eat, "пить",false));        cards.add(new Card(R.drawable.hello, "пить",false));        cards.add(new Card(R.drawable.play, "пить", false));        cards.add(new Card(R.drawable.undress, "пить",false));        cards.add(new Card(R.drawable.silence, "пить",false));        cards.add(new Card(R.drawable.sleep, "пить",false));        List<CardEntity> cardEntities = App.getInstance().getDatabase().cardDao().getAll();        for (CardEntity cardEntity: cardEntities){            cards.add(new UserCard(cardEntity.imagePath, cardEntity.text, false));        }        cardsAdapter.setCards(cards);    }    private void initTabsRecyclerView() {        tabsRecyclerView = findViewById(R.id.tabs_recycler_view);        tabsAdapter = new TabsAdapter();        tabsAdapter.setOnTabCLickListener(new TabsAdapter.OnTabCLickListener() {            @Override            public void onClick(Tab tab) {                Toast.makeText(MainActivity.this, tab.getName(), Toast.LENGTH_SHORT).show();            }        });        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);        tabsRecyclerView.setLayoutManager(layoutManager);        tabsRecyclerView.setAdapter(tabsAdapter);    }    private void setTabs() {        List<Tab> tabs = new ArrayList<>();        tabs.add(new Tab("Еда", 1, false, R.color.lime));        tabs.add(new Tab("Животные", 2, false, R.color.red));        tabs.add(new Tab("Растения", 3, false, R.color.blue));        tabs.add(new Tab("Ещё что-то", 4, false, R.color.navy));        tabs.add(new Tab("Ещё что-то", 5, false, R.color.green));        tabs.add(new Tab("Ещё что-то", 6, false, R.color.red));        tabs.add(new Tab("Ещё что-то", 7, false, R.color.blue));        tabs.add(new Tab("", -1, true, R.color.white));        tabsAdapter.setTabs(tabs);        tabsAdapter.notifyDataSetChanged();    }    private void initCardsSentenceRecyclerView() {        cardsSentenceRecyclerView = findViewById(R.id.cards_sentence_recycler_view);        cardsSentenceAdapter = new CardAdapter();        RecyclerView.LayoutManager layoutManager = new LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false);        cardsSentenceRecyclerView.setLayoutManager(layoutManager);        cardsSentenceRecyclerView.setAdapter(cardsSentenceAdapter);    }    private void initButtons() {        voiceButton = findViewById(R.id.fab_voice);        eraseButton = findViewById(R.id.fab_erase);        voiceButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                speak(cardsSentenceAdapter.getSentence());            }        });        eraseButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                cardsSentenceAdapter.erase();            }        });    }    private void speak(String text) {        if (!ttsEnabled) return;        String utteranceId = this.hashCode() + "";        TTS.speak(text, TextToSpeech.QUEUE_FLUSH, null, utteranceId);    }}